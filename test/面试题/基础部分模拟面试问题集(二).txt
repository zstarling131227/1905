关系型数据库和非关系型数据库的区别是什么？
　　 1.关系型数据库通过外键关联来建立表与表之间的关系，
	2.非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过                          	每个对象自身的属性来决定
　　　
mysql数据库的特点：
　　　1、它是关系型数据库
　　　2、跨平台 可以在Unix、Linux、Windows上运行数据库服务
　　　3、支持多种编程语言  python php java
　　　
数据库软件、数据库和数据仓库它们三个分别是什么？
　　　		1、数据库软件
　　　			是一种软件,可以看得见,可操作,来实现数据库逻辑功能
　　　		2、数据库
　　　			是一种逻辑概念,用来存放数据的仓库,通过数据库软件来实现,侧重存储
　　　		3、数据仓库
　　　			数据仓库主要用于数据挖掘和数据分析
　　　			打个比方，网购：
　　　				数据库： user --> 用户名和密码
　　　				数据仓库：哪个时间段用户登录量最多,哪个用户一年购物最多...
mysql中 取消语句的执行 用的是什么？
　　　要取消的语句  +  \c
　　　
　　　数据库的操作命令就大家自己整理吧，这样印象会深刻一点(增删改查主外键)
　　　当你的数据库不可用的时候，请记住重启一下就好。（etc/init.d/mysql restart）
　　　通常导致数据库不可用的情况是虚拟机不正常关闭，数据库不正常退出导致的。
　　　所以 希望大家在学习中以及以后工作中养成良好的工作习惯，要么按流程退出，要么不退出
　　　
什么是索引？为什么要加索引？他的优缺点
　　　索引是以表少系统的响应时间;可以使表和表之间的连接速度加快。缺点是，数据库录入的速度并且增加了数据可尺寸的大小
什么类型的字段适合加索引？
　　　唯一、不为空、经常被查询的字段
列为基础的数据库对象。索引中保存着表中排序的索引列，并且纪录了索引列在数据库表中的物理存储位置，实现了表中数据的逻辑排序。优点是，通过索引，可以加快数据的查询速度和减

主键和外键的区别？
　　　主键在本表中是惟一的、不可为空的，外键可以重复可以为空；外键和另一张表主键关联，不能创建对应表中不存在的外键


【拓展】什么是事务？什么是锁？
　　　
　　　事务就是被绑定在一起作为一个逻辑工作单元的SQL语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过ACID测试，即原子性，一致性，隔离性和持久性
　　　锁是实现事务的关键，锁可以保证事务的完整性和并发性。与现实生活中锁一样，它可以使某些数据的拥有者，在某段时间内不能使用某些数据或数据结构。
　　　

进程线程部分：
　　　程序是静态的，存放在硬盘里
　　　进程是动态的，运行在内存中
　　　进程是程序运行的实例
　　　程序运行时，由操作系统将程序代码“加载”(实际代码还是在硬盘中ROM，相当于复制一份到运行内存RAM)到虚拟内存中内存中(实际上是分段执行)
　　　同一个程序，执行多次，将为不同进程（根本原因是pid不同）
　　　
　　　同一时间下，一个cpu内核只能执行一个进程，但并不是一次性把一个进程执行到死亡，
　　　而是多个进程对内核资源进行抢占，有操作系统内核来决定什么时间段给什么进程占有
　　　(时间片轮转)
　　　
　　　虚拟内存 每个进程都会有4G的运行内存空间，这里的内存就是运行内存。
为什么是4G呢？
　　　因为我们早期使用的机器一般是32位的，32位地址线能索引的最大内存量是4G，所以分配给进程的虚拟地址都是4G，而如今大多都是64位机器，64位的这个值应该是4G个4G！(4个4G是多少?)

进程：
进程有父进程和子进程
用fork()语句可以创建
当创建完成后  父进程会返回子进程的pid   子进程会返回一个0
如果子进程返回的是个负数，代表进程创建失败。
僵尸进程：子进程死亡时，父进程没有的做出相应的动作。僵尸进程会一直占用系统内存资源，当进程死亡时，如果不对其进行回收，仍会在内存中留下进程描述符。(进程描述符是一个结构体，结构体里面包含了程序退出码，内存指针，上下文信息，标示符，状态等)
孤儿进程：父进程先于子进程退出，子进程就变成了孤儿进程，此时孤儿进程会被一号进程init所收养

什么是进程？什么是线程？他们的区别？
　　　进程是表示资源分配的基本单位，又是调度运行的基本单位？
　　　线程是进程中执行运算的最小单位。

进程和线程的优缺点？
对比维度	多进程	多线程	总结
数据共享、同步	数据共享复杂，需要用IPC；数据是分开的，同步简单	因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂	各有优势
内存、CPU	占用内存多，切换复杂，CPU利用率低	占用内存少，切换简单，CPU利用率高	线程占优
创建销毁、切换	创建销毁、切换复杂，速度慢	创建销毁、切换简单，速度很快	线程占优
编程、调试	编程简单，调试简单	编程复杂，调试复杂	进程占优
可靠性	进程间不会互相影响	一个线程挂掉将导致整个进程挂掉	进程占优
分布式	适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单	适应于多核分布式	进程占优

进程间的通讯方式有哪些？
管道  管道 消息队列关系
信号
信号量
消息队列
共享内存
套接字


http和https有什么区别？？	
　　　自己拓展一下


迭代器和生成器的区别？ 
1）迭代器是一个更抽象的概念，任何对象，如果它的类有next方法和iter方法返回自己本身。对于string、list、dict、tuple等这类容器对象，使用for循环遍历是很方便的。在后台for语句对容器对象调用iter()函数，iter()是python的内置函数。iter()会返回一个定义了next()方法的迭代器对象，它在容器中逐个访问容器内元素，next()也是python的内置函数。在没有后续元素时，next()会抛出一个StopIteration异常
2）生成器（Generator）是创建迭代器的简单而强大的工具。它们写起来就像是正规的函数，只是在需要返回数据的时候使用yield语句。每次next()被调用时，生成器会返回它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）
区别：生成器能做到迭代器能做的所有事,而且因为自动创建了__iter__()和next()方法,生成器显得特别简洁,而且生成器也是高效的，使用生成器表达式取代列表解析可以同时节省内存。除了创建和保存程序状态的自动方法,当发生器终结时,还会自动抛出StopIteration异常

装饰器的作用和功能？
引入日志
函数执行时间统计
执行函数前预备处理
执行函数后的清理功能
权限校验等场景
缓存

GIL是什么？：

Global Interpreter Lock(全局解释器锁)

Python代码的执行由Python 虚拟机(也叫解释器主循环，CPython版本)来控制，Python 在设计之初就考虑到要在解释器的主循环中，同时只有一个线程在执行，即在任意时刻，只有一个线程在解释器中运行。对Python 虚拟机的访问由全局解释器锁（GIL）来控制，正是这个锁能保证同一时刻只有一个线程在运行。
【拓展部分】?
　　　在多线程环境中，Python 虚拟机按以下方式执行：
　　　1. 设置GIL
	2. 切换到一个线程去运行
	3. 运行：
? ??		a. 指定数量的字节码指令，或者
? ? 		b. 线程主动让出控制（可以调用time.sleep(0)）
	4. 把线程设置为睡眠状态
	5. 解锁GIL
	6. 再次重复以上所有步骤
?	在调用外部代码（如C/C++扩展函数）的时候，GIL 将会被锁定，直到这个函数结束为止（由于在这期间没有Python 的字节码被运行，所以不会做线程切换）。
　　　
　　　
　　　
说一下find和grep的作用
　　　grep命令是一种强大的文本搜索工具，grep搜索内容串可以是正则表达式，允许对文本文件进行模式查找。如果找到匹配模式，grep打印包含模式的所有行。
　　　find通常用来再特定的目录下搜索符合条件的文件，也可以用来搜索特定用户
　　　
Python中生成器(yield)的用法
yield简单说来就是一个生成器，这样函数它记住上次返 回时在函数体中的位置。对生成器第 二次（或n 次）调用跳转至该函 次）调用跳转至该函数