# *面向对象
> 面向对象技术简介
    类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
    方法：类中定义的函数。
    类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
    数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。
    方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
    局部变量：定义在方法中的变量，只作用于当前实例的类。
    实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。
    继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
    实例化：创建一个类的实例，类的具体对象。
    对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。 
    ```

    ```
-------------------------------------------------------------------------------------
＃ *常用类的专有方法
>　__str__
    __str__()、__add__()等，一般都是要返回值的
    ```
    class people:
        def __init__(self,name,age):
            self.name=name
            self.age=age

        def __str__(self):
            return '这个人的名字是%s,已经有%d岁了！'%(self.name,self.age)
    a=people('孙悟空',999)
    print(a)
    ***输出：***
    这个人的名字是孙悟空,已经有999岁了！
    如果没有重载函数的话输出的就是一串看不懂的字符串：
    <__main__.people object at 0x00000272A730D278>
    ```   
> __init__
    类有一个名为 __init__() 的特殊方法（构造方法），该方法在类实例化时会自动调用
    类定义了 __init__() 方法，类的实例化操作会自动调用 __init__() 方法
    __init__() 方法可以有参数，参数通过 __init__() 传递到类的实例化操作上。
    __init__()要求无返回值，或者返回 None。
    >> self代表类的实例，而非类.
        类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。
    ```
    class Complex:
    def __init__(self, realpart, imagpart):
        self.r = realpart
        self.i = imagpart
    x = Complex(3.0, -4.5)
    print(x.r, x.i)

    class Test:
    def prt(self):
        print(self)
        print(self.__class__)
    t = Test()
    t.prt()

    **以上实例执行结果为：
        <__main__.Test instance at 0x100771878>
        __main__.Test
    从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。
    self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的.**
> __iter__ 
    __iter__() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。
   >__next__ 
    __next__() 方法（Python 2 里是 next()）会返回下一个迭代器对象。
    ```
    class MyNumbers:
        def __iter__(self):
            self.a = 1
            return self

        def __next__(self):
            x = self.a
            self.a += 1
            return x

    myclass = MyNumbers()
    print(myclass)
    myiter = iter(myclass)
    print(myiter)
    print(next(myiter))
    print(next(myiter))
    print(next(myiter))
    print(next(myiter))
    print(next(myiter))
    ```

> __new__

----------------------------------------------------------------
# *实例方法、类方法、静态方法
> 静态方法无隐含参数，主要为了类实例也可以直接调用静态方法。
    所以逻辑上类方法应当只被类调用，实例方法实例调用，静态方法两者都能调用。主要区别在于参数传递上的区别，实例方法悄悄传递的是self引用作为参数，而类方法悄悄传递的是 cls 引用作为参数。
    Python 实现了一定的灵活性使得类方法和静态方法，都能够被实例和类二者调用。
    ```
    class Test(object):
        def InstanceFun(self):
            print("InstanceFun")
            print(self)
        @classmethod
        def ClassFun(cls):
            print("ClassFun")
            print(cls)
        @staticmethod
        def StaticFun():
            print("StaticFun")
    t = Test()
    t.InstanceFun()# 输出InstanceFun，打印对象内存地址“<__main__.Test object at 0x0293DCF0>”
    Test.ClassFun()# 输出ClassFun，打印类位置 <class '__main__.Test'>
    Test.StaticFun()# 输出StaticFun
    t.StaticFun()# 输出StaticFun
    t.ClassFun()# 输出ClassFun，打印类位置 <class '__main__.Test'>
    # Test.InstanceFun() # 错误，TypeError: unbound method instanceFun() must be called with Test instance as first argument
    # Test.InstanceFun(t)# 输出InstanceFun，打印对象内存地址“<__main__.Test object at 0x0293DCF0>”
    # t.ClassFun(Test) # 错误   classFun() takes exactly 1 argument (2 given)
    ```
    >>在 Python 中，两种方法的主要区别在于参数。实例方法隐含的参数为类实例 self，而类方法隐含的参数为类本身 cls。
    静态方法无隐含参数，主要为了类实例也可以直接调用静态方法。
    所以逻辑上类方法应当只被类调用，实例方法实例调用，静态方法两者都能调用。主要区别在于参数传递上的区别，实例方法悄悄传递的是self引用作为参数，而类方法悄悄传递的是 cls 引用作为参数。
    Python 实现了一定的灵活性使得类方法和静态方法，都能够被实例和类二者调用。
----------------------------------------------------------------
# *私有变量和私有方法
> 类的私有属性
    __private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。
   ```
    class JustCounter:
        __secretCount = 0  # 私有变量
        publicCount = 0    # 公开变量
    
        def count(self):
            self.__secretCount += 1  # 内部调用
            self.publicCount += 1
            print (self.__secretCount) 
    counter = JustCounter()
    counter.count()
    counter.count()
    print (counter.publicCount)
    print (counter.__secretCount)  # 报错，实例不能访问私有变量
    ```
> 类的私有方法
    __private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.__private_methods。
    ```
    class Site:
    def __init__(self, name, url):
        self.name = name       # public
        self.__url = url   # private
 
    def who(self):
        print('name  : ', self.name)
        print('url : ', self.__url)
 
    def __foo(self):          # 私有方法
        print('这是私有方法')
 
    def foo(self):            # 公共方法
        print('这是公共方法')
        self.__foo()
 
    x = Site('菜鸟教程', 'www.runoob.com')
    x.who()        # 正常输出
    x.foo()        # 正常输出
    x.__foo()      # 报错
    ```
--------------------------------------------------------------
